C51 COMPILER V9.56.0.0   LCD                                                               10/28/2017 19:23:28 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lcd.l
                    -st) TABS(2) OBJECT(.\Objects\lcd.obj)

line level    source

   1          
   2          #include<reg52.h>
   3          #include<stdio.h>
   4          void UART_Init()
   5          {
   6   1        TMOD = 0x20;
   7   1        TH1 = 0xFD;
   8   1        SCON = 0x50;
   9   1        TR1 = 1;
  10   1      }
  11          void UART_TxChar(char Data)
  12          {
  13   1        SBUF = Data;
  14   1        while (TI==0);
  15   1        TI = 0;
  16   1      }
  17          
  18          
  19          char UART_RxChar()
  20          {
  21   1        char dat;
  22   1        while (RI==0);
  23   1        RI = 0;
  24   1        dat = SBUF;
  25   1        return(dat);
  26   1      }
  27            
  28          void UART_SendString(char *str)
  29          {
  30   1           int i;
  31   1           for(i=0;str[i]!=0;i++)
  32   1          {
  33   2               UART_TxChar(str[i]);
  34   2          }
  35   1      }
  36          
  37          sbit CLK=P0^1;
  38          sbit DIN=P0^2;
  39          sbit DC=P0^3;
  40          sbit CE=P0^4;
  41          sbit RST=P0^5;
  42          
  43          void Send(unsigned char);
  44          void Data(unsigned char);
  45          void Cmd(unsigned char);
  46          void setPixel(unsigned char, unsigned char);
  47          void setCursor(unsigned char, unsigned char);
  48          void allClear(void);
  49          void Initialize_LCD(void);
  50          void charDisp(unsigned char);
  51          void stringDisp(unsigned char*);
  52          
  53          
  54          
C51 COMPILER V9.56.0.0   LCD                                                               10/28/2017 19:23:28 PAGE 2   

  55          /*unsigned char code  CircuitsTodayLogo [504] = {
  56          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xe0
             -, 0xf0, 0xf0, 0xf8, 0x7c, 0x7c, 0x3e, 0x1c, 0x8c, 0xc8, 0xc0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  57          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1c, 0x3c, 0x7e, 0xff, 0xff, 0xff, 0xe7, 0xe3
             -, 0xc3, 0x89, 0x98, 0x3c, 0x3e, 0x1e, 0x0f, 0x0f, 0x8f, 0x9f, 0xff, 0xfd, 0xf8, 0xf0, 0xf8, 0xfc, 0x7c, 0x3c, 0x1c, 0x18
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  58          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03
             -, 0x07, 0x0f, 0x1f, 0x1f, 0x3e, 0x7c, 0x3e, 0x1f, 0x1f, 0x0f, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  59          0x00, 0x00, 0x30, 0xfc, 0xfc, 0xce, 0x86, 0x06, 0x07, 0x06, 0x86, 0x86, 0x84, 0x00, 0x00, 0x00, 0xfe, 0xfe
             -, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x66, 0x66, 0xf6, 0xfe, 0xbc, 0x18, 0x00, 0x30, 0xfc, 0xfc, 0xce, 0x86, 0x06
             -, 0x07, 0x06, 0x86, 0x86, 0x84, 0x00, 0x00, 0x7e, 0xfe, 0xfe, 0x80, 0x00, 0x00, 0x80, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00
             -, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x06, 0x06, 0x06, 0xfe, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x80, 0x9e, 0x9e, 0x3e, 0x37
             -, 0xb6, 0xf6, 0xe0, 0x40, 0x00, 0x00, 
  60          0x00, 0x00, 0x00, 0x00, 0x61, 0x61, 0x63, 0x63, 0xe3, 0xe3, 0xe1, 0x61, 0x61, 0x60, 0x00, 0x00, 0x03, 0x03
             -, 0x00, 0x00, 0x80, 0xc0, 0xc3, 0xe3, 0x63, 0x60, 0x60, 0xe0, 0xc1, 0xc3, 0x03, 0x02, 0x00, 0x00, 0x01, 0x01, 0x03, 0xe3
             -, 0xe3, 0xe3, 0xe1, 0x61, 0x60, 0xe0, 0xc0, 0xc0, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0xc0, 0xe0, 0xe0
             -, 0xe3, 0xe3, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x23, 0x60, 0xe0, 0xe0, 0xc0, 0x00, 0x81, 0xc1, 0xe3, 0x63
             -, 0x23, 0x01, 0x01, 0x00, 0x00, 0x00, 
  61          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x07, 0x0f, 0x1f, 0x18, 0x18, 0x10, 0x18, 0x1c, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f
             -, 0x1f, 0x1f, 0x1f, 0x18, 0x18, 0x1c, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1e, 0x1f, 0x0f, 0x0c
             -, 0x0d, 0x0f, 0x1f, 0x1e, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1f, 0x1f, 0x1f, 0x03, 0x01, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  62          };
  63          */
  64          
  65          const unsigned char code LookUpTable [][5] =
  66          {
  67              { 0x00, 0x00, 0x00, 0x00, 0x00 },  // space
  68              { 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
  69              { 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
  70              { 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
  71              { 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
  72              { 0xc4, 0xc8, 0x10, 0x26, 0x46 },   // %
  73              { 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
  74              { 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
  75              { 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
  76              { 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
  77              { 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
  78              { 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
  79              { 0x00, 0x00, 0x50, 0x30, 0x00 },   // ,
  80              { 0x10, 0x10, 0x10, 0x10, 0x10 },   // -
  81              { 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
  82              { 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
  83              { 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
  84              { 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
  85              { 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
  86              { 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
  87              { 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
  88              { 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
  89              { 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
  90              { 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
  91              { 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
  92              { 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
C51 COMPILER V9.56.0.0   LCD                                                               10/28/2017 19:23:28 PAGE 3   

  93              { 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
  94              { 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
  95              { 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
  96              { 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
  97              { 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
  98              { 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
  99              { 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
 100              { 0x7E, 0x11, 0x11, 0x11, 0x7E },   // A
 101              { 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
 102              { 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
 103              { 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
 104              { 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
 105              { 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
 106              { 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
 107              { 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
 108              { 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
 109              { 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
 110              { 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
 111              { 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
 112              { 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
 113              { 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
 114              { 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
 115              { 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
 116              { 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
 117              { 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
 118              { 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
 119              { 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
 120              { 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
 121              { 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
 122              { 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
 123              { 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
 124              { 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
 125              { 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
 126              { 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
 127              { 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
 128              { 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
 129              { 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
 130              { 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
 131              { 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
 132              { 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
 133              { 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
 134              { 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
 135              { 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
 136              { 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
 137              { 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
 138              { 0x0C, 0x52, 0x52, 0x52, 0x3E },   // g
 139              { 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
 140              { 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
 141              { 0x20, 0x40, 0x44, 0x3D, 0x00 },   // j
 142              { 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
 143              { 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
 144              { 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
 145              { 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
 146              { 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
 147              { 0x7C, 0x14, 0x14, 0x14, 0x08 },   // p
 148              { 0x08, 0x14, 0x14, 0x18, 0x7C },   // q
 149              { 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
 150              { 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
 151              { 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
 152              { 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
 153              { 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
 154              { 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
C51 COMPILER V9.56.0.0   LCD                                                               10/28/2017 19:23:28 PAGE 4   

 155              { 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
 156              { 0x0C, 0x50, 0x50, 0x50, 0x3C },   // y
 157              { 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
 158              { 0x00, 0x08, 0x3e, 0x41, 0x00 }    // {
 159          };
 160          
 161          
 162          void Send(unsigned char a){
 163   1        unsigned char i;
 164   1        for(i=0;i<8;i++){
 165   2          CLK = 0;
 166   2          if((a&0x80)){
 167   3            DIN = 1;
 168   3          } else {
 169   3            DIN = 0;
 170   3          }
 171   2          CLK = 1;
 172   2          a <<= 1;
 173   2        }
 174   1      }
 175          
 176          
 177          void Data(unsigned char x){
 178   1        DC = 1;
 179   1        CE = 0;
 180   1        Send(x);
 181   1        CE = 1;
 182   1      }
 183          
 184          void Cmd(unsigned char x){
 185   1        DC = 0;
 186   1        CE = 0;
 187   1        Send(x);
 188   1        CE = 1;
 189   1      }
 190          
 191          /* Brings ram pointer to X,Y pixel position            */
 192          /* Input Arguments: x-> X cordinate range from 0 to 83 */
 193          /* Input Arguments: y-> Y cordinate range from 0 to 5  */
 194          void setPixel(unsigned char x, unsigned char y)
 195          {
 196   1        Cmd(0x40|(y&0x07)); // Y axis
 197   1        Cmd(0x80|(x&0x7f)); // X axis
 198   1      }
 199          
 200          /* Clears the screen */
 201          void allClear(void)
 202          {
 203   1        int pixel;
 204   1        setPixel(0,0);                    // Cursor Home.
 205   1        for (pixel=504;pixel>0;pixel--) {Data(0x00);}   // 6*84 = 504 DDRAM addresses.
 206   1      }
 207          
 208          /* Nokia3310 LCD Initialization */
 209          void Initialize_LCD(void)
 210          {
 211   1        RST = 1;  // Set _RES HIGH.
 212   1        CE = 1;   // Disable Chip.
 213   1      
 214   1      
 215   1        Cmd(0x21);    // Activate Chip and H=1.
 216   1        Cmd(0xb2);    // Set LCD Voltage to about 7V.
C51 COMPILER V9.56.0.0   LCD                                                               10/28/2017 19:23:28 PAGE 5   

 217   1        Cmd(0x13);    // Adjust voltage bias.
 218   1        Cmd(0x20);    // Horizontal addressing and H=0.
 219   1        Cmd(0x09);    // Activate all segments.
 220   1        allClear();     // Erase all pixel on the DDRAM.
 221   1        Cmd(0x08);    // Blank the Display.
 222   1        Cmd(0x0C);    // Display Normal.
 223   1        setPixel(0,0);    // Cursor Home.
 224   1      }
 225          
 226          /* Bring cursor to Line and character specified                     */
 227          /* Input Arguments: row    -> Line number range from 1 to 6         */
 228          /* Input Arguments: Column -> character position range from 1 to 14 */
 229          /* You can have maximum of 6 lines of text on LCD and each line
 230             containing 14 characters. Address is auto increment              */
 231          
 232          void setCursor(unsigned char row, unsigned char col){
 233   1        if((row>6) || (row<1) || (col<1) || (col>14))
 234   1          return;
 235   1        setPixel(((col-1)*6),(row-1));
 236   1      }
 237          
 238          /* Writes single character on LCD                   */
 239          /* Input Arguments: ch -> Character to be displayed */
 240          void charDisp(unsigned char a){
 241   1        unsigned char i, b;
 242   1        if ( (a < 0x20) || (a > 0x7c) ){
 243   2          a = 92;
 244   2        }
 245   1        for(i=0;i<5;i++){
 246   2          b = LookUpTable[a - 32][i] << 1;
 247   2          Data(b);
 248   2        }
 249   1        Data(0x00);
 250   1      }
 251          
 252          /* Writes character string on LCD                            */
 253          /* Input Arguments: str -> Pointer to string to be displayed */
 254          void stringDisp(unsigned char *p){
 255   1        while(*p)
 256   1          charDisp(*p++);
 257   1      }
 258          
 259          
 260          
 261          
 262          void Delay(int k)
 263          {
 264   1        int i,j;
 265   1        for(i=0;i<k;i++)
 266   1        for(j=0;j<1000;j++);
 267   1      }
 268            
 269            
 270            
 271          void main(){
 272   1        int l;
 273   1        char RFID[15];
 274   1        //memset(RFID,0,15);
 275   1        UART_Init();  /* Initialize UART communication  */
 276   1        Initialize_LCD();
 277   1        //Bring Cursor to Line 1, character 1
 278   1        setCursor(1,1);
C51 COMPILER V9.56.0.0   LCD                                                               10/28/2017 19:23:28 PAGE 6   

 279   1        //Print string to LCD
 280   1        //stringDisp("gopika");
 281   1        //Delay(3000);
 282   1        //Bring pointer to 0,0 pixel position
 283   1        setPixel(0,0);
 284   1        //Write gfx data on LCD
 285   1          while(1)
 286   1        {
 287   2          for(l=0;l<12;l++)
 288   2          { 
 289   3            RFID[l]=UART_RxChar();
 290   3          }
 291   2          
 292   2          stringDisp(RFID);  /* Print 12 digit tag on LCD */   
 293   2        } 
 294   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    429    ----
   CONSTANT SIZE    =    460    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
